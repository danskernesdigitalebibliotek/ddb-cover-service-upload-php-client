<?php
/**
 * File
 *
 * PHP version 5
 *
 * @category Class
 * @package  CoverService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DDB Cover Service Upload
 *
 * <p>The service is provided by <a href=\"https://www.danskernesdigitalebibliotek.dk/\">Danskernes Digitale Bibliotek</a></p> <p><a href=\"https://www.gnu.org/licenses/agpl-3.0.en.html\">GNU Affero General Public License</a></p>
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CoverService\Model;

use \ArrayAccess;
use \CoverService\ObjectSerializer;

/**
 * File Class Doc Comment
 *
 * @category Class
 * @package  CoverService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class File implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'File';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mime_type' => 'string',
'path' => 'string',
'filename' => 'object',
'extension' => 'object',
'basename' => 'object',
'pathname' => 'object',
'perms' => 'object',
'inode' => 'object',
'size' => 'object',
'owner' => 'object',
'group' => 'object',
'a_time' => 'object',
'm_time' => 'object',
'c_time' => 'object',
'type' => 'object',
'writable' => 'bool',
'readable' => 'bool',
'executable' => 'bool',
'file' => 'bool',
'dir' => 'bool',
'link' => 'bool',
'link_target' => 'object',
'real_path' => 'object',
'file_info' => 'object',
'path_info' => 'object',
'file_class' => 'object',
'info_class' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mime_type' => null,
'path' => null,
'filename' => null,
'extension' => null,
'basename' => null,
'pathname' => null,
'perms' => null,
'inode' => null,
'size' => null,
'owner' => null,
'group' => null,
'a_time' => null,
'm_time' => null,
'c_time' => null,
'type' => null,
'writable' => null,
'readable' => null,
'executable' => null,
'file' => null,
'dir' => null,
'link' => null,
'link_target' => null,
'real_path' => null,
'file_info' => null,
'path_info' => null,
'file_class' => null,
'info_class' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mime_type' => 'mimeType',
'path' => 'path',
'filename' => 'filename',
'extension' => 'extension',
'basename' => 'basename',
'pathname' => 'pathname',
'perms' => 'perms',
'inode' => 'inode',
'size' => 'size',
'owner' => 'owner',
'group' => 'group',
'a_time' => 'ATime',
'm_time' => 'MTime',
'c_time' => 'CTime',
'type' => 'type',
'writable' => 'writable',
'readable' => 'readable',
'executable' => 'executable',
'file' => 'file',
'dir' => 'dir',
'link' => 'link',
'link_target' => 'linkTarget',
'real_path' => 'realPath',
'file_info' => 'fileInfo',
'path_info' => 'pathInfo',
'file_class' => 'fileClass',
'info_class' => 'infoClass'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mime_type' => 'setMimeType',
'path' => 'setPath',
'filename' => 'setFilename',
'extension' => 'setExtension',
'basename' => 'setBasename',
'pathname' => 'setPathname',
'perms' => 'setPerms',
'inode' => 'setInode',
'size' => 'setSize',
'owner' => 'setOwner',
'group' => 'setGroup',
'a_time' => 'setATime',
'm_time' => 'setMTime',
'c_time' => 'setCTime',
'type' => 'setType',
'writable' => 'setWritable',
'readable' => 'setReadable',
'executable' => 'setExecutable',
'file' => 'setFile',
'dir' => 'setDir',
'link' => 'setLink',
'link_target' => 'setLinkTarget',
'real_path' => 'setRealPath',
'file_info' => 'setFileInfo',
'path_info' => 'setPathInfo',
'file_class' => 'setFileClass',
'info_class' => 'setInfoClass'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mime_type' => 'getMimeType',
'path' => 'getPath',
'filename' => 'getFilename',
'extension' => 'getExtension',
'basename' => 'getBasename',
'pathname' => 'getPathname',
'perms' => 'getPerms',
'inode' => 'getInode',
'size' => 'getSize',
'owner' => 'getOwner',
'group' => 'getGroup',
'a_time' => 'getATime',
'm_time' => 'getMTime',
'c_time' => 'getCTime',
'type' => 'getType',
'writable' => 'getWritable',
'readable' => 'getReadable',
'executable' => 'getExecutable',
'file' => 'getFile',
'dir' => 'getDir',
'link' => 'getLink',
'link_target' => 'getLinkTarget',
'real_path' => 'getRealPath',
'file_info' => 'getFileInfo',
'path_info' => 'getPathInfo',
'file_class' => 'getFileClass',
'info_class' => 'getInfoClass'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mime_type'] = isset($data['mime_type']) ? $data['mime_type'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['extension'] = isset($data['extension']) ? $data['extension'] : null;
        $this->container['basename'] = isset($data['basename']) ? $data['basename'] : null;
        $this->container['pathname'] = isset($data['pathname']) ? $data['pathname'] : null;
        $this->container['perms'] = isset($data['perms']) ? $data['perms'] : null;
        $this->container['inode'] = isset($data['inode']) ? $data['inode'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['a_time'] = isset($data['a_time']) ? $data['a_time'] : null;
        $this->container['m_time'] = isset($data['m_time']) ? $data['m_time'] : null;
        $this->container['c_time'] = isset($data['c_time']) ? $data['c_time'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['writable'] = isset($data['writable']) ? $data['writable'] : null;
        $this->container['readable'] = isset($data['readable']) ? $data['readable'] : null;
        $this->container['executable'] = isset($data['executable']) ? $data['executable'] : null;
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['dir'] = isset($data['dir']) ? $data['dir'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['link_target'] = isset($data['link_target']) ? $data['link_target'] : null;
        $this->container['real_path'] = isset($data['real_path']) ? $data['real_path'] : null;
        $this->container['file_info'] = isset($data['file_info']) ? $data['file_info'] : null;
        $this->container['path_info'] = isset($data['path_info']) ? $data['path_info'] : null;
        $this->container['file_class'] = isset($data['file_class']) ? $data['file_class'] : null;
        $this->container['info_class'] = isset($data['info_class']) ? $data['info_class'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mime_type
     *
     * @return string
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param string $mime_type Returns the mime type of the file.
     *
     * @return $this
     */
    public function setMimeType($mime_type)
    {
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return object
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param object $filename filename
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets extension
     *
     * @return object
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param object $extension extension
     *
     * @return $this
     */
    public function setExtension($extension)
    {
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets basename
     *
     * @return object
     */
    public function getBasename()
    {
        return $this->container['basename'];
    }

    /**
     * Sets basename
     *
     * @param object $basename basename
     *
     * @return $this
     */
    public function setBasename($basename)
    {
        $this->container['basename'] = $basename;

        return $this;
    }

    /**
     * Gets pathname
     *
     * @return object
     */
    public function getPathname()
    {
        return $this->container['pathname'];
    }

    /**
     * Sets pathname
     *
     * @param object $pathname pathname
     *
     * @return $this
     */
    public function setPathname($pathname)
    {
        $this->container['pathname'] = $pathname;

        return $this;
    }

    /**
     * Gets perms
     *
     * @return object
     */
    public function getPerms()
    {
        return $this->container['perms'];
    }

    /**
     * Sets perms
     *
     * @param object $perms perms
     *
     * @return $this
     */
    public function setPerms($perms)
    {
        $this->container['perms'] = $perms;

        return $this;
    }

    /**
     * Gets inode
     *
     * @return object
     */
    public function getInode()
    {
        return $this->container['inode'];
    }

    /**
     * Sets inode
     *
     * @param object $inode inode
     *
     * @return $this
     */
    public function setInode($inode)
    {
        $this->container['inode'] = $inode;

        return $this;
    }

    /**
     * Gets size
     *
     * @return object
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param object $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return object
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param object $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets group
     *
     * @return object
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param object $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets a_time
     *
     * @return object
     */
    public function getATime()
    {
        return $this->container['a_time'];
    }

    /**
     * Sets a_time
     *
     * @param object $a_time a_time
     *
     * @return $this
     */
    public function setATime($a_time)
    {
        $this->container['a_time'] = $a_time;

        return $this;
    }

    /**
     * Gets m_time
     *
     * @return object
     */
    public function getMTime()
    {
        return $this->container['m_time'];
    }

    /**
     * Sets m_time
     *
     * @param object $m_time m_time
     *
     * @return $this
     */
    public function setMTime($m_time)
    {
        $this->container['m_time'] = $m_time;

        return $this;
    }

    /**
     * Gets c_time
     *
     * @return object
     */
    public function getCTime()
    {
        return $this->container['c_time'];
    }

    /**
     * Sets c_time
     *
     * @param object $c_time c_time
     *
     * @return $this
     */
    public function setCTime($c_time)
    {
        $this->container['c_time'] = $c_time;

        return $this;
    }

    /**
     * Gets type
     *
     * @return object
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param object $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets writable
     *
     * @return bool
     */
    public function getWritable()
    {
        return $this->container['writable'];
    }

    /**
     * Sets writable
     *
     * @param bool $writable writable
     *
     * @return $this
     */
    public function setWritable($writable)
    {
        $this->container['writable'] = $writable;

        return $this;
    }

    /**
     * Gets readable
     *
     * @return bool
     */
    public function getReadable()
    {
        return $this->container['readable'];
    }

    /**
     * Sets readable
     *
     * @param bool $readable readable
     *
     * @return $this
     */
    public function setReadable($readable)
    {
        $this->container['readable'] = $readable;

        return $this;
    }

    /**
     * Gets executable
     *
     * @return bool
     */
    public function getExecutable()
    {
        return $this->container['executable'];
    }

    /**
     * Sets executable
     *
     * @param bool $executable executable
     *
     * @return $this
     */
    public function setExecutable($executable)
    {
        $this->container['executable'] = $executable;

        return $this;
    }

    /**
     * Gets file
     *
     * @return bool
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param bool $file file
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets dir
     *
     * @return bool
     */
    public function getDir()
    {
        return $this->container['dir'];
    }

    /**
     * Sets dir
     *
     * @param bool $dir dir
     *
     * @return $this
     */
    public function setDir($dir)
    {
        $this->container['dir'] = $dir;

        return $this;
    }

    /**
     * Gets link
     *
     * @return bool
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param bool $link link
     *
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets link_target
     *
     * @return object
     */
    public function getLinkTarget()
    {
        return $this->container['link_target'];
    }

    /**
     * Sets link_target
     *
     * @param object $link_target link_target
     *
     * @return $this
     */
    public function setLinkTarget($link_target)
    {
        $this->container['link_target'] = $link_target;

        return $this;
    }

    /**
     * Gets real_path
     *
     * @return object
     */
    public function getRealPath()
    {
        return $this->container['real_path'];
    }

    /**
     * Sets real_path
     *
     * @param object $real_path real_path
     *
     * @return $this
     */
    public function setRealPath($real_path)
    {
        $this->container['real_path'] = $real_path;

        return $this;
    }

    /**
     * Gets file_info
     *
     * @return object
     */
    public function getFileInfo()
    {
        return $this->container['file_info'];
    }

    /**
     * Sets file_info
     *
     * @param object $file_info file_info
     *
     * @return $this
     */
    public function setFileInfo($file_info)
    {
        $this->container['file_info'] = $file_info;

        return $this;
    }

    /**
     * Gets path_info
     *
     * @return object
     */
    public function getPathInfo()
    {
        return $this->container['path_info'];
    }

    /**
     * Sets path_info
     *
     * @param object $path_info path_info
     *
     * @return $this
     */
    public function setPathInfo($path_info)
    {
        $this->container['path_info'] = $path_info;

        return $this;
    }

    /**
     * Gets file_class
     *
     * @return object
     */
    public function getFileClass()
    {
        return $this->container['file_class'];
    }

    /**
     * Sets file_class
     *
     * @param object $file_class file_class
     *
     * @return $this
     */
    public function setFileClass($file_class)
    {
        $this->container['file_class'] = $file_class;

        return $this;
    }

    /**
     * Gets info_class
     *
     * @return object
     */
    public function getInfoClass()
    {
        return $this->container['info_class'];
    }

    /**
     * Sets info_class
     *
     * @param object $info_class info_class
     *
     * @return $this
     */
    public function setInfoClass($info_class)
    {
        $this->container['info_class'] = $info_class;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
